$n-0: #ffffff;
$n-10: #FAFCFE;
$n-20: #EFF5FB;
$n-30: #E2EAF3;
$n-40: #D3DBE4;
$n-50: #BCC7D2;
$n-100: #ABB8C4;
$n-200: #9AA8B6;
$n-300: #8B99A7;
$n-400: #7C8A98;
$n-500: #566676;
$n-600: #475766;
$n-700: #36424E;
$n-800: #29333D;
$n-900: #1E252C;

$gp-100: #EEFCF5;
$gp-200: #ABEDD9;
$gp-300: #6DDFBC;
$gp-400: #2AC092;
$gp-500: #239F78;
$gp-600: #197155;
$gp-700: #145C45;

$ts-100: #F0FAFF;
$ts-200: #C2EDFF;
$ts-300: #7BD0F4;
$ts-400: #3CACDD;
$ts-500: #1F86B2;
$ts-600: #18698B;
$ts-700: #13526D;

$bn-100: #F2F5FD;
$bn-200: #B6D1F7;
$bn-300: #83AFEC;
$bn-400: #377EE1;
$bn-500: #206ED9;
$bn-600: #1B59B1;
$bn-700: #144385;

$in-100: #E5EAFF;
$in-200: #CED6FD;
$in-300: #AAB7F8;
$in-400: #6174D1;
$in-500: #5464B6;
$in-600: #3A4788;
$in-700: #353D64;

$vr-100: #F8F0FF;
$vr-200: #E6D2F9;
$vr-300: #CEABED;
$vr-400: #A169D3;
$vr-500: #8F4DCC;
$vr-600: #7633B2;
$vr-700: #642B96;

$pp-100: #FFEFF9;
$pp-200: #F9C8E2;
$pp-300: #EF8FC0;
$pp-400: #DD5A9C;
$pp-500: #CC3381;
$pp-600: #A52766;
$pp-700: #701A48;

$rc-100: #FFF0F2;
$rc-200: #FBD0D6;
$rc-300: #F797A3;
$rc-400: #F95367;
$rc-500: #E83047;
$rc-600: #D22D41;
$rc-700: #A42333;

$og-100: #FFF3F0;
$og-200: #FFD6CC;
$og-300: #FDAF9B;
$og-400: #FF8567;
$og-500: #F5613D;
$og-600: #D64B29;
$og-700: #AB3C21;

$al-100: #FFF7EB;
$al-200: #FFE2B8;
$al-300: #FDCD87;
$al-400: #FFB952;
$al-500: #EEA22F;
$al-600: #D38817;
$al-700: #A56A12;

$t: ();

$t: map-merge(
	(
		"100": $ts-100,
		"200": $ts-200,
		"300": $ts-300,
		"400": $ts-400,
		"500": $ts-500,
		"600": $ts-600,
		"700": $ts-700,
	),
	$t
);

$g: ();

$g: map-merge(
	(
		"100": $gp-100,
		"200": $gp-200,
		"300": $gp-300,
		"400": $gp-400,
		"500": $gp-500,
		"600": $gp-600,
		"700": $gp-700,
	),
	$g
);

$b: ();

$b: map-merge(
	(
		"100": $bn-100,
		"200": $bn-200,
		"300": $bn-300,
		"400": $bn-400,
		"500": $bn-500,
		"600": $bn-600,
		"700": $bn-700,
	),
	$b
);

$i: ();

$i: map-merge(
	(
		"100": $in-100,
		"200": $in-200,
		"300": $in-300,
		"400": $in-400,
		"500": $in-500,
		"600": $in-600,
		"700": $in-700,
	),
	$i
);

$v: ();

$v: map-merge(
	(
		"100": $vr-100,
		"200": $vr-200,
		"300": $vr-300,
		"400": $vr-400,
		"500": $vr-500,
		"600": $vr-600,
		"700": $vr-700,
	),
	$v
);

$p: ();

$p: map-merge(
	(
		"100": $pp-100,
		"200": $pp-200,
		"300": $pp-300,
		"400": $pp-400,
		"500": $pp-500,
		"600": $pp-600,
		"700": $pp-700,
	),
	$p
);

$r: ();

$r: map-merge(
	(
		"100": $rc-100,
		"200": $rc-200,
		"300": $rc-300,
		"400": $rc-400,
		"500": $rc-500,
		"600": $rc-600,
		"700": $rc-700,
	),
	$r
);

$o: ();

$o: map-merge(
	(
		"100": $og-100,
		"200": $og-200,
		"300": $og-300,
		"400": $og-400,
		"500": $og-500,
		"600": $og-600,
		"700": $og-700,
	),
	$o
);

$a: ();

$a: map-merge(
	(
		"100": $al-100,
		"200": $al-200,
		"300": $al-300,
		"400": $al-400,
		"500": $al-500,
		"600": $al-600,
		"700": $al-700,
	),
	$a
);

$n: ();

$n: map-merge(
	(
		"0": $n-0,
		"10": $n-10,
		"20": $n-20,
		"30": $n-30,
		"40": $n-40,
		"50": $n-50,
		"100": $n-100,
		"200": $n-200,
		"300": $n-300,
		"400": $n-400,
		"500": $n-500,
		"600": $n-600,
		"700": $n-700,
		"800": $n-800,
		"900": $n-900,
	),
	$n
);

$palete: ();

$palete: map-merge(
	(
		'PiccoloGreen': $g,
		'SulivanTurquoise': $t,
		'NocturneBlue': $b,
		'NightWingIndigo': $i,
		'RavenViolet': $v,
		'PeppaPink': $p,
		'CarmenRed': $r,
		'GokuOrange': $o,
		'LisaAmber': $a,
		'Neutrals': $n,
	),
	$palete
);
$font-weight-regular: 400;

$font-weight-medium: 500;

$font-weight-semibold: 600;

@mixin heading-1 {
	font-size: 47px !important;
	letter-spacing: 0px !important;
	font-weight: $font-weight-regular;
}

@mixin heading-2 {
	font-size: 33px !important;
	letter-spacing: 0.25px !important;
	font-weight: $font-weight-regular;
}

@mixin heading-3 {
	font-size: 23px !important;
	letter-spacing: 0px !important;
	font-weight: $font-weight-regular;
}

@mixin subheading-1 {
	font-size: 22px !important;
	letter-spacing: 0.15px !important;
	font-weight: $font-weight-medium;
}

@mixin subheading-2 {
	font-size: 16px !important;
	letter-spacing: 0.1px !important;
	font-weight: $font-weight-medium;
}

@mixin subheading-3 {
	font-size: 14px !important;
	letter-spacing: 0.1px !important;
	font-weight: $font-weight-regular;
}

@mixin body-1 {
	font-size: 16px !important;
	letter-spacing: 0.5px !important;
	font-weight: $font-weight-regular;
}

@mixin body-2 {
	font-size: 14px !important;
	letter-spacing: 0.25px !important;
	font-weight: $font-weight-regular;
}

@mixin caption {
	font-size: 12px !important;
	letter-spacing: 0.15px !important;
	font-weight: $font-weight-regular;
}

@mixin button-1 {
	font-size: 16px !important;
	letter-spacing: 0.25px !important;
	font-weight: $font-weight-semibold;
}

@mixin button-2 {
	font-size: 14px !important;
	letter-spacing: 0.15px !important;
	font-weight: $font-weight-semibold;
}

$spacers: 0, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3;
$rem: 16px;

@function getSpacerValue($n) {
	$number_as_string: "" + $n;

	@if (str-slice($number_as_string, 1, 1) == 'n') {
		@return nth($spacers, to-number((str-slice($number_as_string, 2))) + 1) * -$rem;
	} @else {
		@return nth($spacers, to-number($number_as_string) + 1) * $rem;
	}
}

// Auxiliary function to convert string to number

@function to-number($value) {
	@if type-of($value) == 'number' {
		@return $value;
	} @else if type-of($value) != 'string' {
		@error 'Value for `to-number` should be a number or a string.';
	}
	
	$result: 0;
	$digits: 0;
	$minus: str-slice($value, 1, 1) == '-';
	$numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
	
	@for $i from if($minus, 2, 1) through str-length($value) {
		$character: str-slice($value, $i, $i);

		@if (index(map-keys($numbers), $character) or $character == '.') {
			@if $character == '.' {
				$digits: 1;
			} @else if $digits == 0 {
				$result: $result * 10 + map-get($numbers, $character);
			} @else {
				$digits: $digits * 10;
				$result: $result + map-get($numbers, $character) / $digits;
			}
		}
	}

	@return if($minus, -$result, $result);
}

// Spacer

@function spacer($n) {
	@return getSpacerValue($n);
}

// Padding functions

@function pa($n) {
	@return getSpacerValue($n);
}

@function pt($n) {
	@return getSpacerValue($n) 0px 0px 0px;
}

@function pr($n) {
	@return 0px getSpacerValue($n) 0px 0px;
}

@function pb($n) {
	@return 0px 0px getSpacerValue($n) 0px;
}

@function pl($n) {
	@return 0px 0px 0px getSpacerValue($n);
}

@function py($n) {
	@return getSpacerValue($n) 0px;
}

@function px($n) {
	@return 0px getSpacerValue($n);
}

@function pTRBL($n1, $n2, $n3, $n4) {
	@return getSpacerValue($n1) getSpacerValue($n2) getSpacerValue($n3) getSpacerValue($n4);
}

@function pYX($n1, $n2) {
	@return getSpacerValue($n1) getSpacerValue($n2);
}

// Margin functions

@function ma($n) {
	@return getSpacerValue($n);
}

@function mt($n) {
	@return getSpacerValue($n) 0px 0px 0px;
}

@function mr($n) {
	@return 0px getSpacerValue($n) 0px 0px;
}

@function mb($n) {
	@return 0px 0px getSpacerValue($n) 0px;
}

@function ml($n) {
	@return 0px 0px 0px getSpacerValue($n);
}

@function my($n) {
	@return getSpacerValue($n) 0px;
}

@function mx($n) {
	@return 0px getSpacerValue($n);
}

@function mTRBL($n1, $n2, $n3, $n4) {
	@return getSpacerValue($n1) getSpacerValue($n2) getSpacerValue($n3) getSpacerValue($n4);
}

@function mYX($n1, $n2) {
	@return getSpacerValue($n1) getSpacerValue($n2);
}
$border-radius-button: 4px;
$border-radius-extra-small: 8px;
$border-radius-small: 12px;
$border-radius-medium: 16px;
$border-radius-large: 20px;
$border-radius-extra-large: 24px;
$border-radius-circle: 50%;

$border-radius: ();

$border-radius: map-merge(
	(
		'button': $border-radius-button,
		'extra-small': $border-radius-extra-small,
		'small': $border-radius-small,
		'medium': $border-radius-medium,
		'large': $border-radius-large,
		'extra-large': $border-radius-extra-large,
		'circle': $border-radius-circle,
	),
	$border-radius
);
